// SPDX-FileCopyrightText: 2025 Upbound Inc. <https://upbound.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	apisresolver "github.com/upbound/provider-gcp-beta/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *RegionBackendService) ResolveReferences( // ResolveReferences of this RegionBackendService.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp-beta.upbound.io", "v1beta1", "HealthCheck", "HealthCheckList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.HealthChecks),
			Extract:       resource.ExtractParamPath("id", true),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.HealthChecksRefs,
			Selector:      mg.Spec.ForProvider.HealthChecksSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HealthChecks")
	}
	mg.Spec.ForProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.HealthChecksRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp-beta.upbound.io", "v1beta1", "HealthCheck", "HealthCheckList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.HealthChecks),
			Extract:       resource.ExtractParamPath("id", true),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.HealthChecksRefs,
			Selector:      mg.Spec.InitProvider.HealthChecksSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.HealthChecks")
	}
	mg.Spec.InitProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.HealthChecksRefs = mrsp.ResolvedReferences

	return nil
}
