// SPDX-FileCopyrightText: 2025 Upbound Inc. <https://upbound.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectServiceIdentityInitParameters struct {

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The service to generate identity for.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ProjectServiceIdentityObservation struct {

	// The email address of the Google managed service account.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Identity of the Google managed service account in the form 'serviceAccount:{email}'. This value is often used to refer to the service account in order to grant IAM permissions.
	Member *string `json:"member,omitempty" tf:"member,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The service to generate identity for.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ProjectServiceIdentityParameters struct {

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The service to generate identity for.
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

// ProjectServiceIdentitySpec defines the desired state of ProjectServiceIdentity
type ProjectServiceIdentitySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectServiceIdentityParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectServiceIdentityInitParameters `json:"initProvider,omitempty"`
}

// ProjectServiceIdentityStatus defines the observed state of ProjectServiceIdentity.
type ProjectServiceIdentityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectServiceIdentityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectServiceIdentity is the Schema for the ProjectServiceIdentitys API. Generate service identity for a service.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp-beta}
type ProjectServiceIdentity struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.service) || (has(self.initProvider) && has(self.initProvider.service))",message="spec.forProvider.service is a required parameter"
	Spec   ProjectServiceIdentitySpec   `json:"spec"`
	Status ProjectServiceIdentityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectServiceIdentityList contains a list of ProjectServiceIdentitys
type ProjectServiceIdentityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectServiceIdentity `json:"items"`
}

// Repository type metadata.
var (
	ProjectServiceIdentity_Kind             = "ProjectServiceIdentity"
	ProjectServiceIdentity_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectServiceIdentity_Kind}.String()
	ProjectServiceIdentity_KindAPIVersion   = ProjectServiceIdentity_Kind + "." + CRDGroupVersion.String()
	ProjectServiceIdentity_GroupVersionKind = CRDGroupVersion.WithKind(ProjectServiceIdentity_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectServiceIdentity{}, &ProjectServiceIdentityList{})
}
