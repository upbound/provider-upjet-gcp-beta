// SPDX-FileCopyrightText: 2025 Upbound Inc. <https://upbound.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	common "github.com/upbound/provider-gcp-beta/config/cluster/common"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Cluster.
	apisresolver "github.com/upbound/provider-gcp-beta/internal/apis"
)

func (mg *Cluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.NodeConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp-beta.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NodeConfig.ServiceAccount),
				Extract:      resource.ExtractParamPath("email", true),
				Reference:    mg.Spec.ForProvider.NodeConfig.ServiceAccountRef,
				Selector:     mg.Spec.ForProvider.NodeConfig.ServiceAccountSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NodeConfig.ServiceAccount")
		}
		mg.Spec.ForProvider.NodeConfig.ServiceAccount = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NodeConfig.ServiceAccountRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.NodeConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp-beta.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NodeConfig.ServiceAccount),
				Extract:      resource.ExtractParamPath("email", true),
				Reference:    mg.Spec.InitProvider.NodeConfig.ServiceAccountRef,
				Selector:     mg.Spec.InitProvider.NodeConfig.ServiceAccountSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NodeConfig.ServiceAccount")
		}
		mg.Spec.InitProvider.NodeConfig.ServiceAccount = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NodeConfig.ServiceAccountRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this NodePool.
func (mg *NodePool) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("container.gcp-beta.upbound.io", "v1beta2", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Cluster),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ClusterRef,
			Selector:     mg.Spec.ForProvider.ClusterSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Cluster")
	}
	mg.Spec.ForProvider.Cluster = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.NodeConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp-beta.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NodeConfig.ServiceAccount),
				Extract:      resource.ExtractParamPath("email", true),
				Reference:    mg.Spec.ForProvider.NodeConfig.ServiceAccountRef,
				Selector:     mg.Spec.ForProvider.NodeConfig.ServiceAccountSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NodeConfig.ServiceAccount")
		}
		mg.Spec.ForProvider.NodeConfig.ServiceAccount = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NodeConfig.ServiceAccountRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.NodeConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp-beta.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NodeConfig.ServiceAccount),
				Extract:      resource.ExtractParamPath("email", true),
				Reference:    mg.Spec.InitProvider.NodeConfig.ServiceAccountRef,
				Selector:     mg.Spec.InitProvider.NodeConfig.ServiceAccountSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NodeConfig.ServiceAccount")
		}
		mg.Spec.InitProvider.NodeConfig.ServiceAccount = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NodeConfig.ServiceAccountRef = rsp.ResolvedReference

	}

	return nil
}
