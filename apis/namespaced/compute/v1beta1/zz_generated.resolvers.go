// SPDX-FileCopyrightText: 2025 Upbound Inc. <https://upbound.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this RegionBackendService.
func (mg *RegionBackendService) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPINamespacedResolver(c, mg)

	var mrsp reference.MultiNamespacedResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.HealthChecks),
		Extract:       resource.ExtractParamPath("id", true),
		Namespace:     mg.GetNamespace(),
		References:    mg.Spec.ForProvider.HealthChecksRefs,
		Selector:      mg.Spec.ForProvider.HealthChecksSelector,
		To: reference.To{
			List:    &HealthCheckList{},
			Managed: &HealthCheck{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HealthChecks")
	}
	mg.Spec.ForProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.HealthChecksRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.HealthChecks),
		Extract:       resource.ExtractParamPath("id", true),
		Namespace:     mg.GetNamespace(),
		References:    mg.Spec.InitProvider.HealthChecksRefs,
		Selector:      mg.Spec.InitProvider.HealthChecksSelector,
		To: reference.To{
			List:    &HealthCheckList{},
			Managed: &HealthCheck{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.HealthChecks")
	}
	mg.Spec.InitProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.HealthChecksRefs = mrsp.ResolvedReferences

	return nil
}
