// SPDX-FileCopyrightText: 2025 Upbound Inc. <https://upbound.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-gcp-beta/apis/namespaced/cloudplatform/v1beta1"
	common "github.com/upbound/provider-gcp-beta/config/namespaced/common"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Cluster.
func (mg *Cluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.NodeConfig != nil {
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NodeConfig.ServiceAccount),
			Extract:      resource.ExtractParamPath("email", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.NodeConfig.ServiceAccountRef,
			Selector:     mg.Spec.ForProvider.NodeConfig.ServiceAccountSelector,
			To: reference.To{
				List:    &v1beta1.ServiceAccountList{},
				Managed: &v1beta1.ServiceAccount{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NodeConfig.ServiceAccount")
		}
		mg.Spec.ForProvider.NodeConfig.ServiceAccount = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NodeConfig.ServiceAccountRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.NodeConfig != nil {
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NodeConfig.ServiceAccount),
			Extract:      resource.ExtractParamPath("email", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.NodeConfig.ServiceAccountRef,
			Selector:     mg.Spec.InitProvider.NodeConfig.ServiceAccountSelector,
			To: reference.To{
				List:    &v1beta1.ServiceAccountList{},
				Managed: &v1beta1.ServiceAccount{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NodeConfig.ServiceAccount")
		}
		mg.Spec.InitProvider.NodeConfig.ServiceAccount = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NodeConfig.ServiceAccountRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this NodePool.
func (mg *NodePool) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Cluster),
		Extract:      common.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ClusterRef,
		Selector:     mg.Spec.ForProvider.ClusterSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Cluster")
	}
	mg.Spec.ForProvider.Cluster = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.NodeConfig != nil {
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NodeConfig.ServiceAccount),
			Extract:      resource.ExtractParamPath("email", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.NodeConfig.ServiceAccountRef,
			Selector:     mg.Spec.ForProvider.NodeConfig.ServiceAccountSelector,
			To: reference.To{
				List:    &v1beta1.ServiceAccountList{},
				Managed: &v1beta1.ServiceAccount{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NodeConfig.ServiceAccount")
		}
		mg.Spec.ForProvider.NodeConfig.ServiceAccount = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NodeConfig.ServiceAccountRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.NodeConfig != nil {
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NodeConfig.ServiceAccount),
			Extract:      resource.ExtractParamPath("email", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.NodeConfig.ServiceAccountRef,
			Selector:     mg.Spec.InitProvider.NodeConfig.ServiceAccountSelector,
			To: reference.To{
				List:    &v1beta1.ServiceAccountList{},
				Managed: &v1beta1.ServiceAccount{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NodeConfig.ServiceAccount")
		}
		mg.Spec.InitProvider.NodeConfig.ServiceAccount = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NodeConfig.ServiceAccountRef = rsp.ResolvedReference

	}

	return nil
}
